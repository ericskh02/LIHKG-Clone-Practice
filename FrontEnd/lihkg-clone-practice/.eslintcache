[{"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\index.js":"1","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\App.js":"2","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\reportWebVitals.js":"3","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Background.js":"4","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList.js":"5","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopBar.js":"6","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList_Topic.js":"7","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Topic.js":"8","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\TopicTopBar.js":"9","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Wall.js":"10","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\Reply.js":"11","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\ReplyTopBar.js":"12","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopic.js":"13","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopicBar.js":"14","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\API\\API.js":"15","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Content.js":"16","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\FirstFloorTopBar.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":1200,"mtime":1609307475575,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":396,"mtime":1608993694235,"results":"22","hashOfConfig":"19"},{"size":1927,"mtime":1609307751573,"results":"23","hashOfConfig":"19"},{"size":1801,"mtime":1609308428032,"results":"24","hashOfConfig":"19"},{"size":1422,"mtime":1609300769911,"results":"25","hashOfConfig":"19"},{"size":1749,"mtime":1609300075767,"results":"26","hashOfConfig":"19"},{"size":252,"mtime":1609291899885,"results":"27","hashOfConfig":"19"},{"size":106,"mtime":1608996188034,"results":"28","hashOfConfig":"19"},{"size":1311,"mtime":1609293171773,"results":"29","hashOfConfig":"19"},{"size":654,"mtime":1609294020571,"results":"30","hashOfConfig":"19"},{"size":2074,"mtime":1609305048344,"results":"31","hashOfConfig":"19"},{"size":310,"mtime":1609057330063,"results":"32","hashOfConfig":"19"},{"size":556,"mtime":1609303825154,"results":"33","hashOfConfig":"19"},{"size":1191,"mtime":1609294004266,"results":"34","hashOfConfig":"19"},{"size":603,"mtime":1609293950943,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ir7eo7",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\index.js",[],["77","78"],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\App.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\reportWebVitals.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Background.js",["79"],"import React, { useState } from 'react';\r\n\r\nimport favicon from '../Image/favicon.png'\r\n\r\nfunction Background(){\r\n    return (\r\n        <div className=\"col-8 min-vh-100 pt-5 bg-light\">\r\n            <img className=\"mr-3\" src={favicon} alt=\"logo\"></img>\r\n            <span>LIHKG 討論區</span>\r\n            <p className=\"pl-5\">練習用</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Background","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList.js",["80","81","82"],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopBar.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList_Topic.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Topic.js",["83","84"],"import { useEffect,useState } from 'react';\r\n\r\nimport {APIGetTopic,APIGetReply} from '../../API/API'\r\n\r\nimport TopicTopBar from './TopicTopBar'\r\nimport Reply from './Reply/Reply'\r\nimport Content from './Content'\r\n\r\nfunction Topic(props) {\r\n\r\n    const id = props.id.id;\r\n\r\n    const [TopicData,setTopicData] = useState(<div></div>);\r\n    const [ReplyData,setReplyData] = useState(<div></div>);\r\n\r\n    function genReplyData(data){\r\n        let generated = [];\r\n        data = data.replyList;\r\n        data.forEach(element => {\r\n            console.log(element)\r\n            generated.push(\r\n                <Reply data={element}/>\r\n            )\r\n        });\r\n        return generated;\r\n    }\r\n\r\n    async function getTopicData(){\r\n        var Response = await APIGetTopic(id)\r\n        .then(\r\n            res=> {return res}\r\n        ).catch(err=>\r\n            console.log(err)\r\n        );\r\n        return Response.data;\r\n    }\r\n\r\n    useEffect(async()=>{\r\n        const TempData = await getTopicData();\r\n        setTopicData((\r\n            <div>\r\n                <TopicTopBar topic={TempData}/>\r\n                <Content content={TempData}/>\r\n            </div>\r\n        ));\r\n        const ReplyData = await getReplyData();\r\n        console.log(ReplyData);\r\n        setReplyData(genReplyData(ReplyData));\r\n    },[])\r\n\r\n    async function getReplyData(){\r\n        const Response = await APIGetReply(id)\r\n        .then(\r\n            res=> {return res}\r\n        ).catch(err=>\r\n            console.log(err)\r\n        );\r\n        return Response.data;\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-8\">\r\n            <div>\r\n                {TopicData}\r\n                {ReplyData}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Topic","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\TopicTopBar.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Wall.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\Reply.js",["85","86"],"import { createContext, useContext } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport ReplyTopBar from './ReplyTopBar'\r\nimport Wall from '../Wall'\r\n\r\n/*\r\nconst data = {\r\n    \"author\": \"writer\",\r\n    \"replytime\": \"2020/12/27\",\r\n    \"floor\": 1,\r\n    \"like\": 10,\r\n    \"dislike\": 2,\r\n    \"content\": \"Hello world!\",\r\n};\r\n*/\r\n\r\nfunction Reply(data) {\r\n    data = data.data;\r\n    return (\r\n        <div className=\"m-5\">\r\n                <div className=\"row\">\r\n                    <ReplyTopBar data={data} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <p><h1>{data.content}</h1></p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"text-secondary bg-light\">\r\n                        <span className=\"m-1\"><FontAwesomeIcon icon={faThumbsUp} /></span>\r\n                        <span className=\"m-1\">{data.like}</span>\r\n                        <span className=\"m-1\"><FontAwesomeIcon icon={faThumbsDown} /></span>\r\n                        <span className=\"m-1\">{data.dislike}</span>\r\n                    </div>\r\n                </div>\r\n                <Wall />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reply","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\ReplyTopBar.js",["87","88"],"import { useContext } from \"react\";\r\n\r\nfunction ReplyTopBar(props) {\r\n    const data = props.data;\r\n    console.log(data)\r\n    if(data.floor == undefined)data.floor = 0;\r\n    return (\r\n        <div>\r\n            <span className=\"text-secondary m-1\">\r\n                #{data.floor+2}\r\n            </span>\r\n            <span className=\"text-primary m-1\">\r\n                {data.author} \r\n            </span>\r\n            <span className=\"text-secondary m-1\">\r\n                {data.replytime}\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReplyTopBar","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopic.js",["89","90"],"import CreateTopicBar from './CreateTopicBar'\r\n\r\nimport {APICreateTopic} from '../../../API/API'\r\nimport { useState,useEffect } from 'react';\r\n\r\nfunction CreateTopic(props) {\r\n\r\n    const [showCreateTopic,setShowCreateTopic] = useState(false);\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach((value, key) => object[key] = value);\r\n        object['author'] = '連尼住';\r\n        APICreateTopic(object);\r\n        setShowCreateTopic(false);\r\n    }\r\n\r\n    useEffect(\r\n        ()=>{\r\n            setShowCreateTopic(props.show);\r\n        },[]\r\n    );\r\n\r\n    let html = <div></div>;\r\n    if(showCreateTopic){\r\n        html =         \r\n        <div className=\"createtopic overflow-hidden\">\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"formgroup text-center mt-5\">\r\n                <span className=\"h4\">發表主題</span>\r\n                <button type=\"button\" className=\"float-right mr-3\">X</button>\r\n            </div>\r\n            <div className=\"formgroup row ml-5 pl-5 mt-5\">\r\n                <select name=\"category\" id=\"category\">\r\n                    <option value=\"1\">吹水台</option>\r\n                    <option value=\"2\">創意台</option>\r\n                </select>\r\n                <input type=\"text\" class=\"form-control col-9 ml-2\" id=\"title\" name=\"title\" aria-describedby=\"Title\" aria-label=\"標題\" placeholder=\"標題\"></input>\r\n            </div>\r\n            <div className=\"formgroup text-center mt-5\">\r\n                <textarea id=\"content\" name=\"content\" rows=\"20\" cols=\"100\" className=\"bg-light\">\r\n                    \r\n                </textarea>\r\n            </div>\r\n            <div className=\"formgroupmt-5\">\r\n                <input type=\"submit\" value=\"提交\" className=\"float-right mr-5\"></input>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    } else {\r\n        html = <div></div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {html}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateTopic","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopicBar.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\API\\API.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Content.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\FirstFloorTopBar.js",["91"],"import { useContext } from \"react\";\r\n\r\nfunction FirstFloorTopBar(props) {\r\n    const data = props.data;\r\n    console.log(data)\r\n    return (\r\n        <div>\r\n            <span className=\"text-secondary m-1\">\r\n                #1\r\n            </span>\r\n            <span className=\"text-primary m-1\">\r\n                {data.author} \r\n            </span>\r\n            <span className=\"text-secondary m-1\">\r\n                {data.replytime}\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FirstFloorTopBar",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"101","line":54,"column":28,"nodeType":"102","endLine":54,"endColumn":62},{"ruleId":"103","severity":1,"message":"104","line":59,"column":15,"nodeType":"105","endLine":61,"endColumn":6},{"ruleId":"103","severity":1,"message":"106","line":61,"column":8,"nodeType":"107","endLine":61,"endColumn":10,"suggestions":"108"},{"ruleId":"103","severity":1,"message":"104","line":38,"column":15,"nodeType":"105","endLine":49,"endColumn":6},{"ruleId":"103","severity":1,"message":"109","line":49,"column":7,"nodeType":"107","endLine":49,"endColumn":9,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":23},{"ruleId":"96","severity":1,"message":"112","line":1,"column":25,"nodeType":"98","messageId":"99","endLine":1,"endColumn":35},{"ruleId":"96","severity":1,"message":"112","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":6,"column":19,"nodeType":"115","messageId":"116","endLine":6,"endColumn":21},{"ruleId":"96","severity":1,"message":"117","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":22},{"ruleId":"103","severity":1,"message":"118","line":23,"column":11,"nodeType":"107","endLine":23,"endColumn":13,"suggestions":"119"},{"ruleId":"96","severity":1,"message":"112","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":20},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component TopicList_Topic must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'genTopics'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has missing dependencies: 'getReplyData' and 'getTopicData'. Either include them or remove the dependency array.",["123"],"'createContext' is defined but never used.","'useContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CreateTopicBar' is defined but never used.","React Hook useEffect has a missing dependency: 'props.show'. Either include it or remove the dependency array. If 'setShowCreateTopic' needs the current value of 'props.show', you can also switch to useReducer instead of useState and read 'props.show' in the reducer.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [genTopics]",{"range":"131","text":"132"},"Update the dependencies array to be: [getReplyData, getTopicData]",{"range":"133","text":"134"},"Update the dependencies array to be: [props.show]",{"range":"135","text":"136"},[1614,1616],"[genTopics]",[1312,1314],"[getReplyData, getTopicData]",[651,653],"[props.show]"]