[{"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\index.js":"1","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\App.js":"2","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\reportWebVitals.js":"3","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Background.js":"4","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList.js":"5","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopBar.js":"6","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList_Topic.js":"7","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Topic.js":"8","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\TopicTopBar.js":"9","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Wall.js":"10","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\Reply.js":"11","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\ReplyTopBar.js":"12","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopic.js":"13","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopicBar.js":"14","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\API\\API.js":"15","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Content.js":"16","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\FirstFloorTopBar.js":"17","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\CreateReply.js":"18","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\CategoryList\\CategoryList.js":"19","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\CategoryList\\Category.js":"20","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\CategoryList\\CategoryData.js":"21","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Account\\Login\\LoginButton.js":"22","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Account\\User\\UserContext.js":"23","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Account\\User\\UserInfo.js":"24","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopicCategory.js":"25","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Like.js":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":2257,"mtime":1610277590233,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":346,"mtime":1610278771146,"results":"31","hashOfConfig":"28"},{"size":2126,"mtime":1610275738491,"results":"32","hashOfConfig":"28"},{"size":1911,"mtime":1610275348965,"results":"33","hashOfConfig":"28"},{"size":1309,"mtime":1610285226837,"results":"34","hashOfConfig":"28"},{"size":2004,"mtime":1610259748221,"results":"35","hashOfConfig":"28"},{"size":930,"mtime":1610285420337,"results":"36","hashOfConfig":"28"},{"size":107,"mtime":1609336438461,"results":"37","hashOfConfig":"28"},{"size":1027,"mtime":1610285343005,"results":"38","hashOfConfig":"28"},{"size":683,"mtime":1610285208501,"results":"39","hashOfConfig":"28"},{"size":2380,"mtime":1610285509513,"results":"40","hashOfConfig":"28"},{"size":310,"mtime":1609057330063,"results":"41","hashOfConfig":"28"},{"size":3263,"mtime":1610277516704,"results":"42","hashOfConfig":"28"},{"size":706,"mtime":1610285379312,"results":"43","hashOfConfig":"28"},{"size":634,"mtime":1610285155232,"results":"44","hashOfConfig":"28"},{"size":1956,"mtime":1610285537030,"results":"45","hashOfConfig":"28"},{"size":1251,"mtime":1610257853134,"results":"46","hashOfConfig":"28"},{"size":214,"mtime":1609916911371,"results":"47","hashOfConfig":"28"},{"size":217,"mtime":1609916848393,"results":"48","hashOfConfig":"28"},{"size":1793,"mtime":1610277608659,"results":"49","hashOfConfig":"28"},{"size":86,"mtime":1610011781720,"results":"50","hashOfConfig":"28"},{"size":691,"mtime":1610278837994,"results":"51","hashOfConfig":"28"},{"size":312,"mtime":1610275404024,"results":"52","hashOfConfig":"28"},{"size":3543,"mtime":1610265150022,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"ir7eo7",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"56"},"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\index.js",[],["118","119"],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\App.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\reportWebVitals.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Background.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList.js",["120","121","122"],"import { useState,useEffect } from 'react'\r\n\r\nimport TopBar from './TopBar'\r\nimport TopicList_Topic from './TopicList_Topic'\r\n\r\nimport { APITopicList } from '../API/API'\r\n\r\nfunction TopicList(props) {\r\n\r\n   const [response,setResponse] = useState([]);\r\n\r\n   var category;\r\n\r\n   if(typeof props.category === \"undefined\"){\r\n       category = \"\";\r\n   } else {\r\n       category = props.category;\r\n   }\r\n\r\n    async function getTopicsFromAPI(){\r\n        var response = await APITopicList(category)\r\n        .then(res=>\r\n            {return res;}\r\n        )\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n        return response;\r\n    }\r\n\r\n    async function genTopics() {\r\n        let generated = [];\r\n        const topics = await getTopicsFromAPI();\r\n        topics.data.topicList.forEach(topic => {\r\n            generated.push(<TopicList_Topic key={topic.id} topics={topic} />);\r\n        });\r\n        return generated;\r\n    }\r\n\r\n    useEffect(async() => {\r\n        setResponse(await genTopics());\r\n    }, []); //This will run only once \r\n\r\n    return (\r\n        <div className=\"min-vh-100\">\r\n            <TopBar category={props.category} setMenuOpen={props.setMenuOpen}/>\r\n            <div className=\"mt-5\">\r\n                {response}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n        /*\r\n       const topics = [\r\n            {\r\n                \"author\": \"作者\",\r\n                \"createTime\": \"10分鐘前\",\r\n                \"like\": 10,\r\n                \"dislike\": 0,\r\n                \"title\": \"第1個post\"\r\n            },\r\n            {\r\n                \"author\": \"連泥住\",\r\n                \"posttime\": \"5分鐘前\",\r\n                \"like\": -10,\r\n                \"dislike\": 0,\r\n                \"title\": \"第2個post\"\r\n            }\r\n        ];\r\n        function genTopics() {\r\n            let generated = [];\r\n            topics.forEach(topic => {\r\n                console.log(topic);\r\n                generated.push(<TopicList_Topic topics={topic} />);\r\n            });\r\n            console.log(generated);\r\n            return generated;\r\n        }\r\n    */\r\n}\r\n\r\nexport default TopicList;\r\n","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopBar.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\TopicList_Topic.js",["123"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction TopicList_Topic(props) {\r\n\r\n    const topics = props.topics;\r\n    function thumbs() {\r\n        if ((topics.like) >= (topics.dislike)) {\r\n            return (<FontAwesomeIcon icon={faThumbsUp} />);\r\n        } else return (<FontAwesomeIcon icon={faThumbsDown} />);\r\n    }\r\n    const href = \"/topic/\" + topics.id\r\n\r\n    return (\r\n\r\n        <div className=\"topiclist_topic\">\r\n            <a href={href}>\r\n                <div className=\"row border-bottom border-grey\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div>\r\n\r\n                        <div className=\"pt-2 pb-1\">\r\n                            <span className=\"text-primary\">{topics.author}</span>\r\n                            <span className=\"text-secondary pl-2 pr-2\">{topics.createTime.substring(0,10)+' '+topics.createTime.substring(11,19)}</span>\r\n                        </div>\r\n                        <div className=\"pt-1 pb-2\">\r\n                            <h5 className=\"\">{topics.title}</h5>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopicList_Topic","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Topic.js",["124","125"],"import { useEffect,useState } from 'react';\r\n\r\nimport {APIGetTopic,APIGetReply, APIGetReplyLikeCountList} from '../../API/API'\r\n\r\n\r\nimport TopicTopBar from './TopicTopBar'\r\nimport Reply from './Reply/Reply'\r\nimport Content from './Content'\r\n\r\nfunction Topic(props) {\r\n\r\n    const id = props.id.id;\r\n\r\n    const [TopicData,setTopicData] = useState(<div></div>);\r\n    const [ReplyData,setReplyData] = useState(<div></div>);\r\n\r\n    function genReplyData(data,likedata){\r\n        let generated = [];\r\n        data = data.replyList;\r\n        data.forEach(element => {\r\n            generated.push(\r\n                <Reply key={element.floor} data={element} likedata={likedata[element.floor]}/>\r\n            )\r\n        });\r\n        return generated;\r\n    }\r\n\r\n    async function getTopicData(){\r\n        var Response = await APIGetTopic(id)\r\n        .then(\r\n            res=> {return res}\r\n        ).catch(err=>\r\n            console.log(err)\r\n        );\r\n        return Response.data;\r\n    }\r\n\r\n    useEffect(async()=>{\r\n        const TempData = await getTopicData();\r\n        setTopicData((\r\n            <div>\r\n                <TopicTopBar topic={TempData}/>\r\n                <Content content={TempData}/>\r\n            </div>\r\n        ));\r\n        const ReplyData = await getReplyData();\r\n        const LikeData = await getReplyLikeData();\r\n        setReplyData(genReplyData(ReplyData,LikeData));\r\n    },[])\r\n\r\n    async function getReplyData(){\r\n        const Response = await APIGetReply(id)\r\n        .then(\r\n            res=>res\r\n        ).catch(err=>\r\n            console.log(err)\r\n        );\r\n        return Response.data;\r\n    }\r\n\r\n    async function getReplyLikeData(){\r\n        const Response = await APIGetReplyLikeCountList(id)\r\n        .then(\r\n            res=>res\r\n        ).catch(err=>\r\n            console.log(err)\r\n        );\r\n        return Response.data;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {TopicData}\r\n            {ReplyData}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Topic","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\TopicTopBar.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Wall.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\Reply.js",["126","127","128","129","130"],"import { createContext, useContext } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport ReplyTopBar from './ReplyTopBar'\r\nimport Wall from '../Wall'\r\nimport Like from '../Like'\r\n\r\n/*\r\nconst data = {\r\n    \"author\": \"writer\",\r\n    \"replytime\": \"2020/12/27\",\r\n    \"floor\": 1,\r\n    \"like\": 10,\r\n    \"dislike\": 2,\r\n    \"content\": \"Hello world!\",\r\n};\r\n*/\r\n\r\nfunction Reply(props) {\r\n    const data = props.data;\r\n    const likedata = props.likedata;\r\n    return (\r\n        <div className=\"m-5\">\r\n                <div className=\"row\">\r\n                    <ReplyTopBar data={data} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <h3>{data.content}</h3>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Like data={data} likedata={likedata}/>\r\n                </div>\r\n                <Wall />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reply","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\ReplyTopBar.js",["131","132"],"import { useContext } from \"react\";\r\n\r\nfunction ReplyTopBar(props) {\r\n    const data = props.data;\r\n    if(data.floor == undefined)data.floor = 0;\r\n    return (\r\n        <div>\r\n            <span className=\"text-secondary m-1\">\r\n                #{data.floor+2}\r\n            </span>\r\n            <span className=\"text-primary m-1\">\r\n                {data.author} \r\n            </span>\r\n            <span className=\"text-secondary m-1\">\r\n                {data.replyTime.substring(0,10)+' '+data.replyTime.substring(11,19)}\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReplyTopBar","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopic.js",["133","134","135","136"],"import {APICreateTopic} from '../../../API/API'\r\nimport { useState,useEffect,useContext } from 'react';\r\n\r\nimport CreateTopicBar from './CreateTopicBar'\r\nimport {UserContext} from '../../Account/User/UserContext'\r\nimport CreateTopicCategory from './CreateTopicCategory'\r\n\r\nfunction CreateTopic(props) {\r\n\r\n    const {showCreateTopic,setShowCreateTopic} = props.setShow;\r\n\r\n    const {userData,setUserData} = useContext(UserContext);\r\n\r\n    function setShow(){\r\n        setShowCreateTopic(!showCreateTopic);\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        if(userData.loggedIn){\r\n            const data = new FormData(event.target);\r\n            var object = {};\r\n            data.forEach((value, key) => object[key] = value);\r\n            object['author'] = userData.name;\r\n            console.log(object);\r\n            APICreateTopic(object);\r\n            window.location.reload();\r\n        } else {\r\n            alert(\"未登入!\")\r\n        }\r\n        setShowCreateTopic(false);\r\n    }\r\n\r\n    let html = <div></div>;\r\n    if(showCreateTopic){\r\n        html =         \r\n        <div className=\"createtopic overflow-hidden\">\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"formgroup text-center mt-5\">\r\n                <span className=\"h4\">發表主題</span>\r\n                <button type=\"button\" className=\"float-right mr-3\" onClick={setShow}>X</button>\r\n            </div>\r\n            <div className=\"formgroup row ml-5 pl-5 mt-5\">\r\n                <select name=\"category\" id=\"category\">\r\n                    {CreateTopicCategory()}\r\n                </select>\r\n                <input type=\"text\" class=\"form-control col-9 ml-2\" id=\"title\" name=\"title\" aria-describedby=\"Title\" aria-label=\"標題\" placeholder=\"標題\"></input>\r\n            </div>\r\n            <div className=\"formgroup text-center mt-5\">\r\n                <textarea id=\"content\" name=\"content\" rows=\"20\" cols=\"100\" className=\"bg-light\">\r\n                    \r\n                </textarea>\r\n            </div>\r\n            <div className=\"formgroupmt-5\">\r\n                <input type=\"submit\" value=\"提交\" className=\"float-right mr-5\"></input>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    } else {\r\n        html = <div></div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {html}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateTopic","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopicBar.js",[],["137","138"],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\API\\API.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Content.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\FirstFloorTopBar.js",["139"],"import { useContext } from \"react\";\r\n\r\nfunction FirstFloorTopBar(props) {\r\n    const data = props.data;\r\n    return (\r\n        <div>\r\n            <span className=\"text-secondary m-1\">\r\n                #1\r\n            </span>\r\n            <span className=\"text-primary m-1\">\r\n                {data.author} \r\n            </span>\r\n            <span className=\"text-secondary m-1\">\r\n                {data.createTime.substring(0,10)+' '+data.createTime.substring(11,19)}\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n            <span>\r\n\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FirstFloorTopBar","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Reply\\CreateReply.js",["140","141","142"],"import { useState, useEffect, useContext } from 'react'\r\n\r\nimport { APICreateReply } from '../../../API/API'\r\nimport {UserContext} from '../../Account/User/UserContext'\r\n\r\nfunction CreateReply(props) {\r\n\r\n    const {userData,setUserData} = useContext(UserContext);\r\n    const {showCreateReply,setShowCreateReply} = props.setShow;\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        if(userData.loggedIn){\r\n            const data = new FormData(event.target);\r\n            var object = {};\r\n            data.forEach((value, key) => object[key] = value);\r\n            object['author'] = userData.name;\r\n            object['topicId'] = props.topicId;\r\n            APICreateReply(object);\r\n            console.log(object)\r\n            window.location.reload();\r\n        } else {\r\n            alert(\"未登入!\")\r\n        }\r\n        setShowCreateReply(false);\r\n    }\r\n\r\n    var html = <div></div>\r\n\r\n    if (showCreateReply) {\r\n        html =\r\n            <div className=\"createtopic\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"formgroup text-center mt-5\">\r\n                        <span className=\"h4\">回覆</span>\r\n                        <button type=\"button\" className=\"float-right mr-3\" onClick={()=>setShowCreateReply(false)}>X</button>\r\n                    </div>\r\n                    <div className=\"formgroup text-center mt-5\">\r\n                        <textarea id=\"content\" name=\"content\" rows=\"20\" cols=\"100\" className=\"bg-light\">\r\n\r\n                        </textarea>\r\n                    </div>\r\n                    <div className=\"formgroupmt-5\">\r\n                        <input type=\"submit\" value=\"提交\" className=\"float-right mr-5\"></input>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n    } else {\r\n        html = <div></div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        { html }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateReply","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\CategoryList\\CategoryList.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\CategoryList\\Category.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\CategoryList\\CategoryData.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Account\\Login\\LoginButton.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Account\\User\\UserContext.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Account\\User\\UserInfo.js",["143"],"import {useContext} from 'react'\r\n\r\nimport {UserContext} from './UserContext'\r\n\r\nfunction UserInfo(){\r\n\r\n    const {userData,setUserData} = useContext(UserContext);\r\n\r\n    if(!userData.loggedIn){\r\n        return (<div>\r\n            <p>Login to see</p>\r\n        </div>);\r\n    } else \r\n    return (\r\n        \r\n        <div className=\"row text-center\">\r\n            <div className=\"col-12\">\r\n                <img className=\"rounded-circle\" src={userData.imgURL} alt=\"Profile Thumbnail\"></img>\r\n            </div>\r\n            <div className=\"col-12\">\r\n                <p className=\"col-md-6 mx-auto\">{userData.name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInfo;","C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Edit\\CreateTopicCategory.js",[],"C:\\Users\\Alex\\Documents\\GitHub\\LIHKG-Clone-Practice\\FrontEnd\\lihkg-clone-practice\\src\\Components\\Topics\\Like.js",["144","145","146","147","148"],"import { useContext, useEffect, useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {APILikeTopic,APIDislikeTopic,APIGetTopicLikeCount,APILikeReply,APIDislikeReply} from '../../API/API'\r\nimport {UserContext} from '../Account/User/UserContext'\r\n\r\nfunction Like(props) {\r\n\r\n    const {userData,setUserData} = useContext(UserContext);\r\n    const data = props.data;\r\n\r\n    const [liked, setLiked] = useState(false);\r\n    const [disliked, setDisliked] = useState(false);\r\n    const [likeCount,setLikeCount] = useState(props.likedata.like);\r\n    const [dislikeCount,setDislikeCount] = useState(props.likedata.dislike);\r\n\r\n    let likebutton = <button className=\"btn btn-light\" onClick={likeButton}><FontAwesomeIcon icon={faThumbsUp} /></button>;\r\n    let dislikebutton = <button className=\"btn btn-light\" onClick={dislikeButton}><FontAwesomeIcon icon={faThumbsDown} /></button>;\r\n\r\n\r\n    //Broken because userData is slower than API\r\n    /*    useEffect(async ()=> {\r\n            let temp = await APIGetIsLiked(data);\r\n            setLiked(temp);\r\n            console.log(liked);\r\n        },[]);\r\n    */\r\n\r\n    useEffect(async()=>{\r\n        if(typeof data.category === \"undefined\"){\r\n\r\n        } else {\r\n            let temp = await APIGetTopicLikeCount(data.id);\r\n            setLikeCount(temp.data.like);\r\n            setDislikeCount(temp.data.dislike);\r\n        }\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if (liked) {\r\n            setLikeCount(likeCount+1);\r\n            likebutton = <button className=\"btn btn-light active\" onClick={likeButton}><FontAwesomeIcon icon={faThumbsUp} /></button>;\r\n        } else {\r\n            likebutton = <button className=\"btn btn-light\" onClick={dislikeButton}><FontAwesomeIcon icon={faThumbsUp} /></button>;\r\n        }\r\n        if (disliked) {\r\n            setDislikeCount(dislikeCount+1);\r\n            dislikebutton = <button className=\"btn btn-light active\" onClick={likeButton}><FontAwesomeIcon icon={faThumbsDown} /></button>\r\n        } else {\r\n            dislikebutton = <button className=\"btn btn-light\" onClick={dislikeButton}><FontAwesomeIcon icon={faThumbsDown} /></button>\r\n        }\r\n    }, [liked, disliked]);\r\n\r\n    async function likeButton() {\r\n        if(!userData.loggedIn){\r\n            alert(\"未登入\");\r\n        } else if (typeof data.category === \"undefined\") { // use to check if it is topic or reply\r\n            const res = await APILikeReply(data);\r\n            (res)?setLiked(true):alert(\"已Like過/已Dislike過\");\r\n        } else {\r\n            const res = await APILikeTopic(data);\r\n            (res)?setLiked(true):alert(\"已Like過/已Dislike過\");\r\n        }\r\n    }\r\n\r\n    async function dislikeButton() {\r\n        if(!userData.loggedIn){\r\n            alert(\"未登入\")\r\n        } else if (typeof data.category === \"undefined\") { // use to check if it is topic or reply\r\n            const res = await APIDislikeReply(data);\r\n            (res)?setDisliked(true):alert(\"已Like過/已Dislike過\");\r\n        } else {\r\n            const res = await APIDislikeTopic(data);\r\n            (res)?setDisliked(true):alert(\"已Like過/已Dislike過\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-secondary bg-light\">\r\n            {likebutton}\r\n            <span className=\"m-1\">{likeCount}</span>\r\n            {dislikebutton}\r\n            <span className=\"m-1\">{dislikeCount}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Like",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":35,"column":28,"nodeType":"155","endLine":35,"endColumn":77},{"ruleId":"156","severity":1,"message":"157","line":40,"column":15,"nodeType":"158","endLine":42,"endColumn":6},{"ruleId":"156","severity":1,"message":"159","line":42,"column":8,"nodeType":"160","endLine":42,"endColumn":10,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":7,"column":14,"nodeType":"164","messageId":"165","endLine":7,"endColumn":20},{"ruleId":"156","severity":1,"message":"157","line":38,"column":15,"nodeType":"158","endLine":49,"endColumn":6},{"ruleId":"156","severity":1,"message":"166","line":49,"column":7,"nodeType":"160","endLine":49,"endColumn":9,"suggestions":"167"},{"ruleId":"162","severity":1,"message":"168","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":23},{"ruleId":"162","severity":1,"message":"169","line":1,"column":25,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"170","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":25},{"ruleId":"162","severity":1,"message":"171","line":3,"column":10,"nodeType":"164","messageId":"165","endLine":3,"endColumn":20},{"ruleId":"162","severity":1,"message":"172","line":3,"column":22,"nodeType":"164","messageId":"165","endLine":3,"endColumn":34},{"ruleId":"162","severity":1,"message":"169","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":20},{"ruleId":"173","severity":1,"message":"174","line":5,"column":19,"nodeType":"175","messageId":"176","endLine":5,"endColumn":21},{"ruleId":"162","severity":1,"message":"177","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":18},{"ruleId":"162","severity":1,"message":"178","line":2,"column":19,"nodeType":"164","messageId":"165","endLine":2,"endColumn":28},{"ruleId":"162","severity":1,"message":"179","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":22},{"ruleId":"162","severity":1,"message":"180","line":12,"column":21,"nodeType":"164","messageId":"165","endLine":12,"endColumn":32},{"ruleId":"149","replacedBy":"181"},{"ruleId":"151","replacedBy":"182"},{"ruleId":"162","severity":1,"message":"169","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":20},{"ruleId":"162","severity":1,"message":"177","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":18},{"ruleId":"162","severity":1,"message":"178","line":1,"column":20,"nodeType":"164","messageId":"165","endLine":1,"endColumn":29},{"ruleId":"162","severity":1,"message":"180","line":8,"column":21,"nodeType":"164","messageId":"165","endLine":8,"endColumn":32},{"ruleId":"162","severity":1,"message":"180","line":7,"column":21,"nodeType":"164","messageId":"165","endLine":7,"endColumn":32},{"ruleId":"162","severity":1,"message":"180","line":10,"column":21,"nodeType":"164","messageId":"165","endLine":10,"endColumn":32},{"ruleId":"156","severity":1,"message":"157","line":30,"column":15,"nodeType":"158","endLine":38,"endColumn":6},{"ruleId":"156","severity":1,"message":"183","line":38,"column":7,"nodeType":"160","endLine":38,"endColumn":9,"suggestions":"184"},{"ruleId":"156","severity":1,"message":"185","line":43,"column":26,"nodeType":"186","endLine":43,"endColumn":134},{"ruleId":"156","severity":1,"message":"187","line":49,"column":29,"nodeType":"186","endLine":49,"endColumn":139},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react/jsx-pascal-case","Imported JSX component TopicList_Topic must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'genTopics'. Either include it or remove the dependency array.","ArrayExpression",["190"],"no-unused-vars","'thumbs' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getReplyData', 'getReplyLikeData', and 'getTopicData'. Either include them or remove the dependency array.",["191"],"'createContext' is defined but never used.","'useContext' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faThumbsUp' is defined but never used.","'faThumbsDown' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useEffect' is defined but never used.","'CreateTopicBar' is defined but never used.","'setUserData' is assigned a value but never used.",["188"],["189"],"React Hook useEffect has missing dependencies: 'data.category' and 'data.id'. Either include them or remove the dependency array.",["192"],"Assignments to the 'likebutton' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","JSXElement","Assignments to the 'dislikebutton' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [genTopics]",{"range":"199","text":"200"},"Update the dependencies array to be: [getReplyData, getReplyLikeData, getTopicData]",{"range":"201","text":"202"},"Update the dependencies array to be: [data.category, data.id]",{"range":"203","text":"204"},[1025,1027],"[genTopics]",[1398,1400],"[getReplyData, getReplyLikeData, getTopicData]",[1496,1498],"[data.category, data.id]"]